# Use a slim, stable base image
FROM debian:stable-slim

# Set environment variables for non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive

# Install necessary dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    unzip \
    nodejs \
    npm \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Build arguments
ARG FOUNDRY_VERSION_ZIP
ARG FOUNDRY_DATA_PATH=/data
ARG FOUNDRY_LICENSE_KEY

# Set environment variables
ENV FOUNDRY_DATA_PATH=${FOUNDRY_DATA_PATH}
ENV FOUNDRY_LICENSE_KEY=${FOUNDRY_LICENSE_KEY}

# Set working directory
WORKDIR /app

# Copy the specific FoundryVTT zip file for this build
COPY ${FOUNDRY_VERSION_ZIP} /app/foundryvtt.zip

# Unzip FoundryVTT and then remove the zip file to keep the image clean
RUN unzip /app/foundryvtt.zip -d /app && \
    rm /app/foundryvtt.zip

# Create necessary directories
RUN mkdir -p ${FOUNDRY_DATA_PATH} && \
    mkdir -p ${FOUNDRY_DATA_PATH}/Data/modules && \
    mkdir -p ${FOUNDRY_DATA_PATH}/Data/systems && \
    mkdir -p ${FOUNDRY_DATA_PATH}/Data/worlds

# Copy entrypoint script
COPY tests/docker/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Expose the FoundryVTT port
EXPOSE 30000

# Use entrypoint script for proper initialization
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command arguments passed to entrypoint
CMD ["--port=30000", "--headless"]
