#!/usr/bin/env node

// CRITICAL: Pre-commit validation - BLOCKS commit if violations found
import { execSync } from 'child_process';

console.log('🔒 CRITICAL: Scanning for sensitive data...');

const SENSITIVE_DATA_PATTERNS = [
  { pattern: /[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}/g, description: 'FoundryVTT License Key' },
  { pattern: /(?:api[_-]?key|apikey)["\\s]*[:=]["\\s]*[a-zA-Z0-9_\\-]{16,}/gi, description: 'API Key' },
  { pattern: /sk-(?:proj-)?[a-zA-Z0-9_-]{20,}/g, description: 'OpenAI API Key' },
  { pattern: /sk-ant-[a-zA-Z0-9\\-_]{95,}/g, description: 'Anthropic API Key' }
];

try {
  const changedFiles = execSync('git diff --cached --name-only', { encoding: 'utf-8' }).trim().split('\n').filter(f => f.length > 0);

  for (const file of changedFiles) {
    try {
      const stagedContent = execSync(`git diff --cached -- "${file}"`, { encoding: 'utf-8' });
      const addedLines = stagedContent.split('\n').filter(line => line.startsWith('+') && !line.startsWith('+++')).map(line => line.substring(1));
      
      for (const line of addedLines) {
        for (const {pattern, description} of SENSITIVE_DATA_PATTERNS) {
          const matches = line.match(pattern);
          if (matches) {
            console.error('');
            console.error('🚨 CRITICAL SECURITY VIOLATION: SENSITIVE DATA DETECTED! 🚨');
            console.error('');
            console.error(`📁 File: ${file}`);
            console.error(`🏷️  Type: ${description}`);
            console.error(`💥 Content: ${line.trim()}`);
            console.error(`🎯 Detected: ${matches.join(', ')}`);
            console.error('');
            console.error('🚨 COMMIT BLOCKED - REMOVE SENSITIVE DATA FIRST');
            console.error('💡 Use environment variables instead: ${FOUNDRY_LICENSE_KEY}');
            process.exit(1);
          }
        }
      }
    } catch (e) {
      // Skip unreadable files
    }
  }

  console.log('✅ No sensitive data detected in staged changes');
  
  // Run lint-staged if no sensitive data found
  console.log('📋 Running code formatting...');
  execSync('npx lint-staged', { stdio: 'inherit' });
  
  // Check for console statement violations (warning only for now)
  console.log('🔍 Checking console statements...');
  try {
    execSync('npm run console:validate', { stdio: 'inherit' });
  } catch (e) {
    console.warn('⚠️  Console validation failed - consider fixing before next commit');
    console.warn('💡 Run "npm run console:prefix" to auto-fix prefix issues');
    // Don't block commit for now, just warn
  }
  
  // Run ESLint to check for errors (warnings won't block)
  console.log('📋 Running ESLint checks...');
  try {
    execSync('npx eslint scripts/**/*.js --max-warnings 160', { stdio: 'inherit' });
  } catch (e) {
    if (e.status === 1) {
      console.error('❌ ESLint found errors that must be fixed');
      console.error('💡 Run "npm run lint:fix" to auto-fix some issues');
      process.exit(1);
    }
  }
  
} catch (error) {
  console.error('❌ Pre-commit validation failed:', error.message);
  process.exit(1);
}