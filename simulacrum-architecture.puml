@startuml Simulacrum FoundryVTT Architecture

!theme blueprint
skinparam backgroundColor #FFFFFF
skinparam shadowing false
skinparam linetype polyline

title Simulacrum FoundryVTT Module - Class Architecture

' Define packages for organization
package "Core System" as core {

  class SimulacrumCore {
    + {static} init()
    + {static} onReady()
    + {static} generateResponse(messages, options)
    + {static} processMessage(message, user, options)
    + {static} initializeAIClient()
    + {static} clearConversation()
    + {static} getSystemPrompt()
    + {static} registerDefaultTools()
    --
    - {static} aiClient: AIClient
    - {static} conversationManager: ConversationManager
    --
    <<file: scripts/core/simulacrum-core.js>>
  }

  class AIClient {
    + chat(messages, tools)
    + chatWithSystem(systemPrompt, messages)
    + validateConnection()
    + getContextLength()
    + registerProvider(name, provider)
    --
    - providers: Map<string, AIProvider>
    - defaultProvider: string
    --
    <<file: scripts/core/ai-client.js>>
  }

  abstract class AIProvider {
    + {abstract} sendMessage(message, context)
    + {abstract} generateResponse(messages)
    + isAvailable()
    --
    # config: Object
    --
    <<file: scripts/core/ai-client.js>>
  }

  class OpenAIProvider {
    + sendMessage(message, context)
    + generateResponse(messages)
    + isAvailable()
    --
    <<file: scripts/core/ai-client.js>>
  }

  class MockAIProvider {
    + sendMessage(message, context)
    + generateResponse(messages)
    --
    <<file: scripts/core/ai-client.js>>
  }

  class ConversationManager {
    + addMessage(role, content, toolCalls, toolCallId)
    + getMessages()
    + clear()
    + compressHistory()
    + getTokenCount()
    + setMaxTokens(maxTokens)
    --
    - messages: Array
    - maxTokens: number
    - tokenizer: TokenizerAdapter
    --
    <<file: scripts/core/conversation.js>>
  }

  class ConversationEngine {
    + processTurn(options)
    --
    - conversationManager: ConversationManager
    --
    <<file: scripts/core/conversation-engine.js>>
  }

  class ChatHandler {
    + processUserMessage(message, user, options)
    + handleAIResponse()
    + handleToolExecution()
    --
    - conversationManager: ConversationManager
    --
    <<file: scripts/core/chat-handler.js>>
  }

}

package "Tool System" as tools {

  class ToolRegistry {
    + registerTool(tool, options)
    + getTool(name)
    + getToolSchemas()
    + executeTool(name, context)
    + listTools()
    + validateToolCall(toolCall)
    --
    - tools: Map<string, registration>
    - categories: Map<string, string[]>
    - dependencies: Map<string, string[]>
    --
    <<singleton>>
    <<file: scripts/core/tool-registry.js>>
  }

  abstract class BaseTool {
    + {abstract} execute()
    + validateParameters()
    + getSchema()
    + setDocumentAPI()
    --
    # name: string
    # description: string
    # documentAPI: DocumentAPI
    --
    <<file: scripts/tools/base-tool.js>>
  }

  class DocumentCreateTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-create.js>>
  }

  class DocumentReadTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-read.js>>
  }

  class DocumentUpdateTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-update.js>>
  }

  class DocumentDeleteTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-delete.js>>
  }

  class DocumentListTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-list.js>>
  }

  class DocumentSearchTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-search.js>>
  }

  class DocumentSchemaTool {
    + execute()
    + validateParameters()
    --
    <<file: scripts/tools/document-schema.js>>
  }

  class DocumentAPI {
    + {static} createDocument()
    + {static} getDocument()
    + {static} updateDocument()
    + {static} deleteDocument()
    + {static} listDocuments()
    + {static} searchDocuments()
    + {static} getAllDocumentTypes()
    + {static} getDocumentSchema()
    --
    <<static methods only>>
    <<file: scripts/core/document-api.js>>
  }
}

package "User Interface" as ui {

  class SimulacrumSidebarTab {
    + addMessage()
    + clearMessages()
    + scrollBottom()
    + _onSendMessage()
    + _onClearChat()
    + _onCancelProcess()
    --
    - chatHandler: ChatHandler
    - logger: Logger
    --
    <<file: scripts/ui/simulacrum-sidebar-tab.js>>
  }

  class ConversationCommands {
    + {static} processCommand()
    + {static} listCommands()
    --
    <<static methods only>>
    <<file: scripts/ui/conversation-commands.js>>
  }

  class SettingsInterface {
    + render()
    + activateListeners()
    --
    <<file: scripts/ui/settings-interface.js>>
  }

  class ConfirmationDialog {
    + show()
    + hide()
    --
    <<file: scripts/ui/confirmation.js>>
  }
}

package "Utilities" as utils {

  class Logger {
    + error()
    + warn()
    + info()
    + debug()
    --
    - component: string
    - level: number
    --
    <<file: scripts/utils/logger.js>>
  }

  class ValidationEngine {
    + validateSchema()
    + validateContext()
    + registerValidator()
    --
    <<file: scripts/utils/validation.js>>
  }

  class ValidationErrorHandler {
    + formatError()
    + createResponse()
    --
    <<file: scripts/utils/validation-errors.js>>
  }

  class SchemaValidator {
    + validate()
    + getSchema()
    --
    <<file: scripts/utils/schema-validator.js>>
  }

  class PermissionManager {
    + canCreate()
    + canRead()
    + canUpdate()
    + canDelete()
    --
    <<file: scripts/utils/permissions.js>>
  }

  class TokenizerAdapter {
    + encode()
    + count()
    --
    <<file: scripts/utils/tokenizer.js>>
  }
}

package "Error Handling" as errors {

  class SimulacrumError {
    + constructor(message, type, details)
    --
    <<file: scripts/utils/errors.js>>
  }

  class ValidationError {
    --
    <<file: scripts/utils/errors.js>>
  }

  class ToolError {
    --
    <<file: scripts/utils/errors.js>>
  }

  class DocumentError {
    --
    <<file: scripts/utils/errors.js>>
  }

  class APIError {
    --
    <<file: scripts/utils/errors.js>>
  }
}

' Inheritance relationships
AIProvider <|-- OpenAIProvider
AIProvider <|-- MockAIProvider
BaseTool <|-- DocumentCreateTool
BaseTool <|-- DocumentReadTool
BaseTool <|-- DocumentUpdateTool
BaseTool <|-- DocumentDeleteTool
BaseTool <|-- DocumentListTool
BaseTool <|-- DocumentSearchTool
BaseTool <|-- DocumentSchemaTool
SimulacrumError <|-- ValidationError
SimulacrumError <|-- ToolError
SimulacrumError <|-- DocumentError
SimulacrumError <|-- APIError

' Composition relationships
SimulacrumCore o-- AIClient : uses
SimulacrumCore o-- ConversationManager : manages
SimulacrumCore o-- ToolRegistry : uses
ChatHandler o-- ConversationManager : uses
ChatHandler o-- ConversationEngine : creates
ConversationEngine o-- ConversationManager : uses
AIClient o-- AIProvider : contains
ToolRegistry o-- BaseTool : manages
SimulacrumSidebarTab o-- ChatHandler : uses
ConversationManager o-- TokenizerAdapter : uses

' Dependency relationships
BaseTool ..> DocumentAPI : calls
DocumentCreateTool ..> ValidationEngine : validates
DocumentReadTool ..> PermissionManager : checks
DocumentUpdateTool ..> SchemaValidator : validates
SimulacrumSidebarTab ..> ConversationCommands : uses
ChatHandler ..> Logger : logs
AIClient ..> Logger : logs
ToolRegistry ..> Logger : logs

' Tool registration flow
note top of ToolRegistry
  Singleton instance manages
  all tool registrations
end note

note right of SimulacrumCore
  Static orchestrator class
  Entry point for module
end note

note bottom of DocumentAPI
  Static utility class
  FoundryVTT document operations
end note

@enduml