@startuml Message Processing Flow

!theme blueprint
skinparam backgroundColor #FFFFFF
skinparam participant {
    BorderColor #2E86AB
    BackgroundColor #A23B72
    FontColor #FFFFFF
}
skinparam actor {
    BorderColor #F18F01
    BackgroundColor #C73E1D
    FontColor #FFFFFF
}

title Simulacrum Module - Message Processing Interaction Flow

actor User
participant "SimulacrumSidebarTab\n(UI Layer)" as UI
participant "ChatHandler\n(Orchestrator)" as Chat
participant "ConversationEngine\n(Turn Processor)" as Engine
participant "ConversationManager\n(History)" as Conv
participant "SimulacrumCore\n(AI Interface)" as Core
participant "AIClient\n(Provider Abstraction)" as AI
participant "ToolRegistry\n(Tool Manager)" as Tools
participant "BaseTool\n(Tool Implementation)" as Tool
participant "DocumentAPI\n(FoundryVTT Interface)" as Doc

User -> UI: Send message
activate UI

UI -> Chat: processUserMessage(message, user)
activate Chat

Chat -> Conv: addMessage("user", message)
activate Conv
Conv --> Chat: message added
deactivate Conv

Chat -> Engine: processTurn(options)
activate Engine

Engine -> Conv: getMessages()
Conv --> Engine: conversation history

Engine -> Core: generateResponse(messages)
activate Core

Core -> AI: chat(messages, tools)
activate AI
AI --> Core: AI response with tool calls
deactivate AI

Core --> Engine: response with tools
deactivate Core

alt AI Response has tool calls
    Engine -> Tools: executeTool(name, params)
    activate Tools

    Tools -> Tool: execute(params)
    activate Tool

    Tool -> Doc: createDocument() / getDocument() / etc.
    activate Doc
    Doc --> Tool: FoundryVTT document result
    deactivate Doc

    Tool --> Tools: tool result
    deactivate Tool

    Tools --> Engine: formatted result
    deactivate Tools

    Engine -> Conv: addMessage("assistant", content, toolCalls)
    Engine -> Conv: addMessage("tool", result, toolCallId)

    ' Tool loop may continue for follow-up AI responses
    Engine -> Core: generateResponse(messages)
    activate Core
    Core -> AI: chat(messages, tools)
    AI --> Core: follow-up response
    Core --> Engine: final response
    deactivate Core
end

Engine --> Chat: final assistant response
deactivate Engine

Chat -> UI: onAssistantMessage(response)
Chat -> UI: onToolResult(result)

UI -> UI: addMessage(response)
UI --> User: Display AI response and tool results
deactivate Chat
deactivate UI

note over User, Doc
  Key Design Patterns:
  • Static Orchestration: SimulacrumCore coordinates everything
  • Singleton Registry: ToolRegistry manages all tools
  • Strategy Pattern: AIClient abstracts different AI providers
  • Template Method: BaseTool provides common validation/execution flow
  • Observer Pattern: UI updates via callbacks during processing
end note

@enduml