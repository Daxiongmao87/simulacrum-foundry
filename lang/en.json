{
  "SIMULACRUM": {
    "Settings": {
      "ApiKey": {
        "Name": "AI Provider API Key",
      "Hint": "Enter your API key (OpenAI-compatible APIs)."
      }
    },
    "Chat": {
      "CommandDescription": "Interact with the Simulacrum AI assistant.",
      "NoApiKey": "Please configure your AI API key in the module settings."
    },
    "Panel": {
      "Title": "Simulacrum AI Assistant"
    },
    "SidebarTab": {
      "Title": "Simulacrum"
    },
    "AIName": "Simulacrum AI",
    "Welcome": "Welcome",
    "WelcomeMessage": "Hello! I'm your AI assistant for campaign document management. How can I help you today?",
    "InputPlaceholder": "Ask me about your campaign documents...",
    "SendMessage": "Send Message",
    "ClearChat": "Clear Chat",
    "SystemPrompt": {
      "Standard": {
        "Intro": "You are Simulacrum, an AI assistant operating inside FoundryVTT.  You strive to assist the user in world-building, context gathering, and document creation.  You always respond with natural language, using html tags for emphatic formatting.  Even when invoking a tool call, you are communicative of your intentions.  You strive to be as autonomous as possible, using your tools to accomplish tasks.  With subjects specific to the foundry session, your approach is methodical, gathering context first, then act afterward.",
        "Capabilities": "You can manipulate campaign documents (create/read/update/delete/list/search) via tools.",
        "Autonomous": "Prefer acting autonomously with reasonable defaults; avoid unnecessary clarification questions.",
        "Planning": "When a user asks for an action, propose a brief plan and call suitable tools to complete it.",
        "MultiTool": "You can call multiple tools in sequence to accomplish complex tasks.",
        "ToolLabels": "When calling a tool, include both process_label (what happens after tool finishes, e.g. \"Verifying creation\") and plan_label (next iteration action, e.g. \"Showing document details\") in the arguments.",
        "Verification": "I will automatically verify document creation and updates by reading them back - expect to see verification results in the conversation.",
        "Continuation": "Continue the conversation naturally after tool execution - explain what you accomplished and offer next steps or ask clarifying questions for additional work."
      },
      "Legacy": {
        "Intro": "You are Simulacrum, an AI assistant for FoundryVTT.  You strive to assist the user in world-building, context gathering, and document creation.  You always respond with natural language, using html tags for emphatic formatting.  Even when invoking a tool call, you are communicative of your intentions.  You stirve to be as autonomous as possible, using your tools to accomplish tasks.  With subjects specific to the foundry session, your approach is methodical, gathering context first, then acting afterward.",
        "Instructions": "When you need to use a tool, respond with text AND a JSON block in this EXACT format:",
        "Format": "```json\n{\"tool_call\":{\"name\":\"tool_name\",\"arguments\":{\"param1\":\"value1\",\"param2\":\"value2\"}}}\n```",
        "Warning": "CRITICAL: Use valid JSON syntax only. No parentheses like (x,y), use arrays [\"x\",\"y\"]. Use the exact parameter names and types defined in the schemas below.",
        "Action": "Take action immediately with reasonable defaults."
      },
      "CustomInstructions": "Additional instructions: {customPrompt}"
    },
    "ToolStatus": {
      "Creating": "Creating",
      "Reading": "Reading", 
      "Updating": "Updating",
      "Deleting": "Deleting",
      "Searching": "Searching",
      "Listing": "Listing",
      "Verifying": "Verifying",
      "Working": "Working",
      "Processing": "Processing"
    },
    "Errors": {
      "JSONParsingError": "JSON Parsing Error: {error}",
      "JSONParsingInstructions": "The JSON in your previous response was malformed. Please provide a valid JSON tool call in the correct format:",
      "JSONFormatExample": "```json\n{\"tool_call\": {\"name\": \"tool_name\", \"arguments\": {...}}}\n```",
      "ProblematicContent": "Problematic content: {content}"
    }
  }
}
