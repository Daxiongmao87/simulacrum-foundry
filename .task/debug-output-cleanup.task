# Task: Remove Excessive Debug Outputs from Simulacrum Module - Issue #66

## Problem Statement
Issue #66: ESLint reports 93 warnings about "Unexpected console statement" during pre-commit checks. The project's ESLint configuration only allows `console.warn` and `console.error`, but the codebase contains 502 console statements across 34 files using disallowed methods (`console.log`, `console.debug`, `console.info`).

## Acceptance Criteria
- All ESLint "Unexpected console statement" warnings are resolved
- Essential error reporting is preserved using `console.warn` or `console.error`
- Debug noise and development logging is removed
- Code passes pre-commit ESLint checks without console statement violations
- No functionality is broken during cleanup

## MVP Scope
Fix ESLint violations only - do NOT build a new logging system or add logging infrastructure. Simple removal/conversion of existing console statements.

## Task Breakdown

### Phase 1: Investigation and Categorization
**Agent: project-investigator**

Analyze all 502 console statements across 34 files to:

1. **Categorize console statements by type and purpose:**
   - Development debug statements (remove these)
   - Essential error reporting (convert to console.error)
   - Important warnings (convert to console.warn)
   - Informational messages (evaluate for removal vs conversion)

2. **Identify critical files requiring careful review:**
   - Core module files (`scripts/main.js`, `scripts/settings.js`)
   - Error handling (`scripts/error-handling.js`)
   - AI service integration (`scripts/chat/ai-service.js`)
   - Tool registry and CRUD operations

3. **Document findings in specific categories:**
   - Files with mostly debug statements (candidates for bulk removal)
   - Files with error handling that should use console.error
   - Files with user-facing warnings that should use console.warn
   - Test files (determine if console statements should remain for test output)

4. **Assess impact of removal on functionality:**
   - Identify any console statements that serve functional purposes
   - Flag any statements that might be relied upon by external systems

### Phase 2: Implementation and Cleanup
**Agent: implementation-tester**

Execute systematic cleanup based on investigation findings:

1. **Remove development debug statements:**
   - Delete `console.log()` used for debugging
   - Delete `console.debug()` statements
   - Remove `console.info()` used for development information

2. **Convert essential reporting:**
   - Change error reporting to `console.error()`
   - Change important warnings to `console.warn()`
   - Apply conversions only where statements serve legitimate error/warning purposes

3. **Handle special cases:**
   - Test files: Determine appropriate handling (remove vs keep for test output)
   - Build/tooling files: Review if console output is intentional for CLI tools
   - Third-party/submodule files: Handle according to their purpose

4. **Validate changes incrementally:**
   - Run `npm run lint` after each batch of changes
   - Ensure no new ESLint errors are introduced
   - Test basic module functionality after major file changes

### Phase 3: Final Validation
**Agent: implementation-tester**

Comprehensive testing and validation:

1. **ESLint compliance verification:**
   - Run `npm run lint` to confirm zero console statement warnings
   - Verify pre-commit hooks pass without console violations
   - Confirm only `console.warn` and `console.error` remain (if any)

2. **Functionality testing:**
   - Test module initialization in FoundryVTT
   - Verify AI service functionality works correctly
   - Test tool operations to ensure no broken functionality
   - Confirm error handling still reports appropriately

3. **Edge case validation:**
   - Test error conditions to ensure console.error statements work
   - Verify any remaining console.warn statements trigger appropriately
   - Confirm no essential debugging was accidentally removed

## Success Metrics
1. ESLint `npm run lint` reports zero "Unexpected console statement" warnings
2. Pre-commit hooks pass without console statement violations
3. Module loads and functions correctly in FoundryVTT
4. Essential error reporting is preserved and functional
5. Git commit succeeds without ESLint blocking

## Implementation Constraints
- **NO scope creep**: Do not implement new logging systems or infrastructure
- **Preserve functionality**: Do not remove console statements that serve functional purposes
- **ESLint compliance**: Only `console.warn` and `console.error` are allowed
- **MVP approach**: Fix the immediate ESLint violations, nothing more

## Dependencies
- Access to codebase for analysis and modification
- Ability to run `npm run lint` for validation
- Understanding of ESLint configuration in `.eslintrc.json`

## Notes
- 502 console statements across 34 files indicates significant cleanup needed
- Some files (like tests, build tools) may legitimately need console output
- Focus on core module files where debug statements should definitely be removed
- Test files in `/tests/` directory may need different handling than core module files